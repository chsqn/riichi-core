(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  module.exports = {
    SERVER: {
      url: 'ws://localhost:8000/ws',
      realm: 'riichi'
    },
    PREFIX: 'io.github.summivox.riichi',
    PAI_H: 1.3,
    PAI_PATH: "img/pai"
  };
}).call(this);

},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var entityMap, out$ = typeof exports != 'undefined' && exports || this;
  out$.utf8_to_b64 = utf8_to_b64;
  function utf8_to_b64(it){
    return window.btoa(unescape(encodeURIComponent(it)));
  }
  out$.b64_to_utf8 = b64_to_utf8;
  function b64_to_utf8(it){
    return decodeURIComponent(escape(window.atob(it)));
  }
  out$.getDataURI = getDataURI;
  function getDataURI(it){
    return 'data:text/html;base64,' + utf8_to_b64(it);
  }
  entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };
  out$.escapeHTML = escapeHTML;
  function escapeHTML(it){
    return String(it).replace(/[&<>"'\/]/g, function(it){
      return entityMap[it];
    });
  }
}).call(this);

},{}],4:[function(require,module,exports){
(function (process){
// Generated by LiveScript 1.4.0
(function(){
  var ref$, utf8_to_b64, escapeHTML, SERVER, PREFIX, qS, qSA, inputGameId, btnNew, inputName, btnJoin, btnLeave, con, debugStr, debug, joined, updateJoined, gameId, G, playerName, playerToken, playerSeat, playerNames, conn, S, subscription;
  ref$ = require('./util'), utf8_to_b64 = ref$.utf8_to_b64, escapeHTML = ref$.escapeHTML;
  ref$ = require('./conf'), SERVER = ref$.SERVER, PREFIX = ref$.PREFIX;
  qS = function(it){
    return document.querySelector(it);
  };
  qSA = function(it){
    return document.querySelectorAll(it);
  };
  inputGameId = qS('#inputGameId');
  btnNew = qS('#btnNew');
  inputName = qS('#inputName');
  btnJoin = qS('#btnJoin');
  btnLeave = qS('#btnLeave');
  con = qS('#con');
  debugStr = con.innerHTML;
  debug = function(it){
    con.innerHTML = debugStr += escapeHTML(it) + '\n';
  };
  joined = false;
  updateJoined = function(it){
    joined = it;
    btnJoin.disabled = joined;
    return btnLeave.disabled = !joined;
  };
  gameId = null;
  G = null;
  playerName = null;
  playerToken = null;
  playerSeat = null;
  playerNames = null;
  conn = new autobahn.Connection(SERVER);
  S = null;
  conn.onopen = onOpen;
  conn.onclose = onClose;
  process.nextTick(function(){
    debug("connecting to " + SERVER.url + " ...");
    return conn.open();
  });
  function onOpen(){
    debug("connected");
    return S = conn.session;
  }
  function onClose(reason, details){
    debug("lost connection. reason: " + reason);
    console.error(details);
    S = null;
    return updateJoined(false);
  }
  btnNew.addEventListener('click', function(){
    if (!(S != null && S.isOpen)) {
      return debug("error: not connected yet");
    }
    debug("try create new game...");
    return S.call(PREFIX + ".game.new").then(function(gameId){
      debug("  new game " + gameId + " created");
      return inputGameId.value = gameId;
    })['catch'](function(err){
      debug("  error: " + err);
      return console.error(err);
    });
  });
  btnJoin.addEventListener('click', function(){
    if (!(S != null && S.isOpen)) {
      return debug("error: not connected yet");
    }
    if (joined) {
      return debug("error: already joined");
    }
    if ((gameId = inputGameId.value.trim()).length === 0) {
      return debug("empty game id");
    }
    playerName = inputName.value.trim();
    G = PREFIX + ".game." + gameId;
    return subscribe().then(function(){
      debug("joining...");
      return S.call(G + ".join", [playerName]);
    }).then(function(token){
      debug("  joined. player token: " + token);
      playerToken = token;
      return updateJoined(true);
    })['catch'](function(err){
      debug("  error: " + err);
      console.error(err);
      return unSubscribe();
    });
  });
  btnLeave.addEventListener('click', function(){
    if (!(S != null && S.isOpen)) {
      return debug("error: not connected yet");
    }
    if (!joined) {
      return debug("error: not joined");
    }
    debug("leaving...");
    return S.call(G + ".leave", [playerToken]).then(function(){
      debug("  leaved.");
      playerToken = null;
      updateJoined(false);
      return unSubscribe();
    })['catch'](function(err){
      debug("  error: " + err);
      return console.error(err);
    });
  });
  subscription = null;
  function subscribe(){
    return S.subscribe(G, handler).then(function(it){
      return subscription = it;
    });
  }
  function unSubscribe(){
    if (subscription) {
      return S.unsubscribe(subscription);
    }
  }
  function handler(args){
    var type, details;
    type = args[0], details = args[1];
    switch (type) {
    case 'join':
      return debug("player " + details + " has joined");
    case 'leave':
      return debug("player " + details + " has leaved");
    case 'start':
      playerNames = details;
      playerSeat = playerNames.indexOf(playerName);
      if (playerSeat === -1) {
        debug("game started without you (WTF?)");
        return conn.close();
      } else {
        return startGame();
      }
    }
  }
  function startGame(){
    var args, s;
    conn.close();
    args = {
      gameId: gameId,
      playerNames: playerNames,
      playerSeat: playerSeat,
      playerToken: playerToken
    };
    s = encodeURIComponent(JSON.stringify(args));
    return window.location = 'game.html#' + s;
  }
}).call(this);

}).call(this,require('_process'))

},{"./conf":2,"./util":3,"_process":1}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
