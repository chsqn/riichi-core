(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  module.exports = {
    SERVER: {
      url: 'ws://localhost:8000/ws',
      realm: 'riichi'
    },
    PREFIX: 'io.github.summivox.riichi',
    PAI_H: 1.3,
    PAI_PATH: "img/pai"
  };
}).call(this);

},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var ref$, PAI_H, PAI_PATH, $, $new, $class, $render, qS, qSA, $HTML, Pai, PaiRow, Sutehai, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('./conf'), PAI_H = ref$.PAI_H, PAI_PATH = ref$.PAI_PATH;
  ref$ = window.React, $ = ref$.DOM, $new = ref$.createElement, $class = ref$.createClass, $render = ref$.render;
  qS = function(it){
    return document.querySelector(it);
  };
  qSA = function(it){
    return document.querySelectorAll(it);
  };
  $HTML = function(it){
    return {
      dangerouslySetInnerHTML: {
        __html: it
      }
    };
  };
  out$.Pai = Pai = $class({
    displayName: 'Pai',
    render: function(){
      var ref$, pai, x, y, rot, className, transform;
      ref$ = this.props, pai = ref$.pai, x = ref$.x, y = ref$.y, rot = ref$.rot, className = ref$.className;
      className == null && (className = '');
      className += ' pai';
      if (!/^\d[mpsz]$/.test(pai)) {
        return null;
      }
      switch (rot) {
      case -1:
        transform = "rotate(-90)";
        break;
      case 0:
        transform = "translate(0, -" + PAI_H + ")";
        break;
      case +1:
        transform = "translate(" + PAI_H + ", -1) rotate(+90)";
      }
      return $['g'](importAll$({
        transform: "translate(" + x + " " + y + ")",
        className: className
      }, $HTML("<image xlink:href=\"" + PAI_PATH + "/" + pai + ".svg\"\n  width=\"1\" height=\"" + PAI_H + "\" preserveAspectRatio=\"xMidYMid slice\"\n  transform=\"" + transform + "\"/>")));
    }
  });
  out$.PaiRow = PaiRow = $class({
    displayName: 'PaiRow',
    render: function(){
      var xNext, ref$, right, x, y;
      xNext = 0;
      ref$ = this.props, right = ref$.right, x = ref$.x, y = ref$.y;
      return $['g']({
        transform: "translate(" + x + " " + y + ")"
      }, this.props.list.map(function(arg$, i){
        var pai, pos, space, className, x, y, rot;
        pai = arg$.pai, pos = arg$.pos, space = arg$.space, className = arg$.className;
        switch (pos) {
        case 'l':
        case 'r':
          x = right ? -xNext - PAI_H : xNext;
          y = 0;
          rot = pos === 'l'
            ? -1
            : +1;
          xNext += PAI_H;
          break;
        case 'L':
        case 'R':
          x = right
            ? -xNext
            : xNext - PAI_H;
          y = -1;
          rot = pos === 'L'
            ? -1
            : +1;
          break;
        default:
          x = right ? -xNext - 1 : xNext;
          y = 0;
          rot = 0;
          xNext++;
        }
        if (space) {
          xNext += space;
        }
        return $new(Pai, {
          pai: pai,
          x: x,
          y: y,
          rot: rot,
          className: className != null ? className : '',
          key: i
        });
      }));
    }
  });
  out$.Sutehai = Sutehai = $class({
    displayName: 'Sutehai',
    render: function(){
      var rows, row, ref$, x, y, maxCol, maxRow, sutehai, showFuuro, i$, len$, i, pai, fuuroPlayer, tsumokiri, riichi, className, pos;
      rows = [];
      row = [];
      ref$ = this.props, x = ref$.x, y = ref$.y, maxCol = ref$.maxCol, maxRow = ref$.maxRow, sutehai = ref$.sutehai, showFuuro = ref$.showFuuro;
      for (i$ = 0, len$ = sutehai.length; i$ < len$; ++i$) {
        i = i$;
        ref$ = sutehai[i$], pai = ref$.pai, fuuroPlayer = ref$.fuuroPlayer, tsumokiri = ref$.tsumokiri, riichi = ref$.riichi;
        className = '';
        if (fuuroPlayer != null && !showFuuro) {
          continue;
        }
        if (tsumokiri) {
          className += ' pai-tsumokiri';
        }
        if (riichi) {
          className += ' pai-riichi';
          pos = 'l';
        } else {
          pos = 'u';
        }
        if (row.push({
          pai: pai,
          pos: pos,
          className: className
        }) === maxCol && rows.length <= maxRow - 2) {
          rows.push(row);
          row = [];
        }
      }
      if (row.length) {
        rows.push(row);
      }
      return $['g']({}, rows.map(function(row, i){
        return $new(PaiRow, {
          list: row,
          x: x,
          y: y + (i + 1) * PAI_H,
          right: false,
          key: i
        });
      }));
    }
  });
  out$.rowFromFuuro = rowFromFuuro;
  function rowFromFuuro(fuuro, player){
    var ret, i$, len$, f, own, other, dP;
    ret = [];
    for (i$ = 0, len$ = fuuro.length; i$ < len$; ++i$) {
      f = fuuro[i$];
      own = f.ownPai.sort();
      other = f.otherPai;
      dP = (f.otherPlayer - player + 4) % 4;
      switch (f.type.toString().toLowerCase()) {
      case 'shuntsu':
      case 'minko':
        if (dP === 1) {
          ret.push({
            pai: other,
            pos: 'r'
          });
        }
        ret.push({
          pai: own[1],
          pos: 'u'
        });
        if (dP === 2) {
          ret.push({
            pai: other,
            pos: 'l'
          });
        }
        ret.push({
          pai: own[0],
          pos: 'u'
        });
        if (dP === 3) {
          ret.push({
            pai: other,
            pos: 'l'
          });
        }
        break;
      case 'daiminkan':
        if (dP === 1) {
          ret.push({
            pai: other,
            pos: 'r'
          });
        }
        ret.push({
          pai: own[2],
          pos: 'u'
        });
        ret.push({
          pai: own[1],
          pos: 'u'
        });
        if (dP === 2) {
          ret.push({
            pai: other,
            pos: 'l'
          });
        }
        ret.push({
          pai: own[0],
          pos: 'u'
        });
        if (dP === 3) {
          ret.push({
            pai: other,
            pos: 'l'
          });
        }
        break;
      case 'kakan':
        if (dP === 1) {
          ret.push({
            pai: other,
            pos: 'r'
          });
          ret.push({
            pai: f.kakanPai,
            pos: 'R'
          });
        }
        ret.push({
          pai: own[1],
          pos: 'u'
        });
        if (dP === 2) {
          ret.push({
            pai: other,
            pos: 'l'
          });
          ret.push({
            pai: f.kakanPai,
            pos: 'L'
          });
        }
        ret.push({
          pai: own[0],
          pos: 'u'
        });
        if (dP === 3) {
          ret.push({
            pai: other,
            pos: 'l'
          });
          ret.push({
            pai: f.kakanPai,
            pos: 'L'
          });
        }
        break;
      case 'ankan':
        ret.push({
          pai: '8z',
          pos: 'u'
        });
        ret.push({
          pai: own[1],
          pos: 'u'
        });
        ret.push({
          pai: own[0],
          pos: 'u'
        });
        ret.push({
          pai: '8z',
          pos: 'u'
        });
        break;
      default:
        throw Error("wtf type " + f.type);
      }
    }
    return ret;
  }
  out$.rowFromJuntehai = rowFromJuntehai;
  function rowFromJuntehai(juntehai, tsumo){
    var ret;
    ret = juntehai.map(function(it){
      return {
        pai: it,
        pos: 'u',
        space: 0
      };
    });
    if (tsumo) {
      ret[ret.length - 1].space = 1 / 6;
      ret.push({
        pai: tsumo,
        pos: 'u',
        space: 0
      });
    }
    return ret;
  }
  out$.rowBack = rowBack;
  function rowBack(n, tsumo){
    var ret, res$, i$, i;
    res$ = [];
    for (i$ = 0; i$ < n; ++i$) {
      i = i$;
      res$.push({
        pai: '8z',
        pos: 'u',
        space: 0
      });
    }
    ret = res$;
    if (tsumo) {
      ret[ret.length - 1].space = 1 / 6;
      ret.push({
        pai: '8z',
        pos: 'u',
        space: 0
      });
    }
    return ret;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./conf":2}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var entityMap, out$ = typeof exports != 'undefined' && exports || this;
  out$.utf8_to_b64 = utf8_to_b64;
  function utf8_to_b64(it){
    return window.btoa(unescape(encodeURIComponent(it)));
  }
  out$.b64_to_utf8 = b64_to_utf8;
  function b64_to_utf8(it){
    return decodeURIComponent(escape(window.atob(it)));
  }
  out$.getDataURI = getDataURI;
  function getDataURI(it){
    return 'data:text/html;base64,' + utf8_to_b64(it);
  }
  entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };
  out$.escapeHTML = escapeHTML;
  function escapeHTML(it){
    return String(it).replace(/[&<>"'\/]/g, function(it){
      return entityMap[it];
    });
  }
}).call(this);

},{}],5:[function(require,module,exports){
(function (process){
// Generated by LiveScript 1.4.0
(function(){
  var escapeHTML, ref$, SERVER, PREFIX, ui, qS, qSA, svg, con, debugStr, debug, gameId, G, playerName, playerToken, playerSeat, playerNames, subscription, conn, S;
  escapeHTML = require('./util').escapeHTML;
  ref$ = require('./conf'), SERVER = ref$.SERVER, PREFIX = ref$.PREFIX;
  ui = require('./ui');
  qS = function(it){
    return document.querySelector(it);
  };
  qSA = function(it){
    return document.querySelectorAll(it);
  };
  svg = qS('#main');
  con = qS('#con');
  debugStr = con.innerHTML;
  debug = function(it){
    con.innerHTML = debugStr += escapeHTML(it) + '\n';
  };
  gameId = null;
  G = null;
  playerName = null;
  playerToken = null;
  playerSeat = null;
  playerNames = null;
  (function(){
    var s, j, gameId, playerNames, playerSeat, playerToken, e;
    try {
      s = document.location.hash.substr(1);
      j = JSON.parse(decodeURIComponent(s));
      gameId = j.gameId, playerNames = j.playerNames, playerSeat = j.playerSeat, playerToken = j.playerToken;
    } catch (e$) {
      e = e$;
      debug("invalid game URL");
      throw e;
    }
  })();
  subscription = null;
  function subscribe(){
    return subscription = S.subscribe(G, onGameEvent);
  }
  function unSubscribe(){
    if (subscription) {
      return S.unsubscribe(subscription);
    }
  }
  conn = new autobahn.Connection(SERVER);
  S = null;
  conn.onopen = onOpen;
  conn.onclose = onClose;
  process.nextTick(function(){
    debug("connecting to " + SERVER.url + " ...");
    return conn.open();
  });
  function onOpen(){
    debug("connected");
    return S = conn.session;
  }
  function onClose(reason, details){
    debug("lost connection. reason: " + reason);
    console.error(details);
    return S = null;
  }
  function onGameEvent(args, kwargs){
    var type, details;
    type = args[0], details = args[1];
    throw Error('unimplemented');
  }
}).call(this);

}).call(this,require('_process'))

},{"./conf":2,"./ui":3,"./util":4,"_process":1}]},{},[5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
